from handlers import open_support_ticket, support_call_handler, call_main_admin
from support_middleware import SupportMiddleware
from core.config import settings

from utils.misc.bot_commands import set_default_commands

from utils.keyboards import buttons_markup, close_ticket_markup

from loader import bot, dp, types

from aiogram.types import ParseMode
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram import executor

from services import SupportTicketService, UserService

from states import SupportOpenTicketStates, NotificationsStates


@dp.message_handler(Command('support_call'))
async def support_call(message: types.Message):
    await support_call_handler(message.from_user.id)


@dp.callback_query_handler(state=SupportOpenTicketStates.panel)
async def choose_panel_query_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if callback_query.data == 'faker-panel':
        await state.update_data(panel='Faker')
    else:
        await state.update_data(panel='Trump')
    await SupportOpenTicketStates.link.set()
    await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É üîó:')


@dp.message_handler(state=SupportOpenTicketStates.link)
async def get_link(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(link=message.text)
    await SupportOpenTicketStates.login.set()
    await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω üë§:')


@dp.message_handler(state=SupportOpenTicketStates.login)
async def get_login(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(login=message.text)
    await SupportOpenTicketStates.password.set()
    await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîë:')


@dp.message_handler(state=SupportOpenTicketStates.password)
async def get_password(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(password=message.text)
    await SupportOpenTicketStates.steam_id.set()
    await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ SteamID üÜî:')


@dp.message_handler(state=SupportOpenTicketStates.steam_id)
async def get_steam_id_and_open_ticket(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(steam_id=message.text)
    data = await state.get_data()
    await state.finish()
    await open_support_ticket(
        user_id,
        message.from_user.username,
        data['panel'],
        data['link'],
        data['login'],
        data['password'],
        data['steam_id']
    )


@dp.callback_query_handler()
async def callback_query_handler(callback_query: types.CallbackQuery):
    if callback_query.data == 'open-support-ticket':
        await support_call_handler(callback_query.from_user.id)
    elif callback_query.data == 'call_main_admin':
        await call_main_admin(callback_query.from_user.id)


@dp.message_handler(Command('main_admin'))
async def call_main_admin_command(message: types.Message):
    await call_main_admin(message.from_user.id)


@dp.message_handler(lambda message: message.text == "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç ‚ùé")
async def close_ticket(message: types.Message):
    user_id = message.from_user.id

    await bot.send_message(user_id, '–ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç ‚úñÔ∏è', reply_markup=ReplyKeyboardRemove())

    response_data = await SupportTicketService().close_user_ticket(user_id)
    if response_data.error is not None:
        await bot.send_message(user_id, response_data.error)
        return

    message_for_opponent = None

    if response_data.ticket_closed:
        if response_data.opponent_id is not None:
            await bot.send_message(
                response_data.opponent_id,
                '–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç ‚úÖ',
                parse_mode=ParseMode.MARKDOWN
            )
            ticket_data = response_data.data
            ticket_info_text = (f'–¢–∏–∫–µ—Ç: {response_data.ticket_token}\n'
                                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket_data["user_username"]}\n'
                                f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{ticket_data["admin_username"]}\n'
                                f'–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç: {ticket_data["closed"]}\n\n'
                                f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n'
                                f'–ü–∞–Ω–µ–ª—å: {ticket_data["panel"]}\n'
                                f'–°—Å—ã–ª–∫–∞: {ticket_data["link"]}\n'
                                f'–õ–æ–≥–∏–Ω: {ticket_data["login"]}\n'
                                f'–ü–∞—Ä–æ–ª—å: {ticket_data["password"]}\n'
                                f'SteamID: {ticket_data["steam_id"]}')
            await bot.send_message(settings.tickets_ends_chat_id, ticket_info_text)

    else:
        message_for_opponent = ('–í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.'
                                ' –ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞'
                                ' –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç ‚ùé", –ø–æ—Å–ª–µ —á–µ–≥–æ —Ç–∏–∫–µ—Ç'
                                ' –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç.')

    await bot.send_message(user_id, f"{response_data.message}")
    if response_data.opponent_id is not None and message_for_opponent is not None:
        await bot.send_message(response_data.opponent_id, message_for_opponent)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    start_support_token = message.get_args()

    if len(start_support_token) > 0:
        if await SupportTicketService().user_have_opened_tickets(user_id):
            await bot.send_message(
                user_id,
                '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã! ‚ùå'
            )
            return

        ticket_available = await SupportTicketService().check_ticket_available(start_support_token)
        if ticket_available is not None:
            await bot.send_message(user_id, ticket_available.error)
            return
        else:
            await SupportTicketService().add_admin_to_ticket(
                user_id,
                message.from_user.username,
                start_support_token
            )
            ticket_data = await SupportTicketService().get_current_ticket_data(user_id)
            await bot.send_message(ticket_data['user_id'], '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üë®‚Äçüíª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É')
            await message.answer(f'–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º üë§', reply_markup=close_ticket_markup)
    else:
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É üë®‚Äçüîß', reply_markup=buttons_markup)


@dp.message_handler(lambda message: message.text and message.text.startswith('/ticket'))
async def get_ticket_by_token(message: types.Message):
    user_id = message.from_user.id
    if user_id == settings.main_admin_id:
        ticket_token = message.text.replace('/ticket', '').strip()

        ticket_data = await SupportTicketService().get_ticket_data_by_token(ticket_token)
        if ticket_data.error is not None:
            await bot.send_message(user_id, ticket_data.error)
            return

        ticket_info_text = (f'–¢–∏–∫–µ—Ç: {ticket_token}\n'
                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket_data.data["user_username"]}\n'
                            f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{ticket_data.data["admin_username"]}\n'
                            f'–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç: {ticket_data.data["closed"]}\n\n'
                            f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n'
                            f'–ü–∞–Ω–µ–ª—å: {ticket_data.data["panel"]}\n'
                            f'–°—Å—ã–ª–∫–∞: {ticket_data.data["link"]}\n'
                            f'–õ–æ–≥–∏–Ω: {ticket_data.data["login"]}\n'
                            f'–ü–∞—Ä–æ–ª—å: {ticket_data.data["password"]}\n'
                            f'SteamID: {ticket_data.data["steam_id"]}')
        await bot.send_message(user_id, ticket_info_text)
        for message_id in ticket_data.data['messages']:
            await bot.forward_message(
                user_id,
                from_chat_id=settings.bot_messages_chat_id,
                message_id=message_id
            )
    else:
        await bot.send_message(user_id, '–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! ‚ùå')


@dp.message_handler(lambda message: message.text and message.text.startswith('/send_notifications'))
async def get_notifications_text(message: types.Message):
    user_id = message.from_user.id
    if user_id == settings.main_admin_id:
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üí¨:')
        await NotificationsStates.notification.set()
    else:
        await bot.send_message(user_id, '–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! ‚ùå')


@dp.message_handler(state=NotificationsStates.notification, content_types=types.ContentType.ANY)
async def send_notifications(message: types.Message, state: FSMContext):
    await state.finish()
    message_id = message.message_id
    ids = await UserService().get_all_users_ids()
    for usr_id in ids:
        await bot.copy_message(usr_id, message.from_user.id, message_id)
    await bot.send_message(message.from_user.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! üéâ')


async def on_startup(dispatcher):
    await set_default_commands(dispatcher)


if __name__ == '__main__':
    dp.middleware.setup(SupportMiddleware())
    executor.start_polling(dp, on_startup=on_startup)
